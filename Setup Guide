ðŸš€ Getting Started with Flask Product API (Docker + PostgreSQL)
To run this Flask API project from scratch using the "Product_API" repository, follow these detailed steps:

1. Clone the Repository
Open a terminal or command prompt and navigate to the directory where you want to store the project. Then clone the repo:

bash
Copy
Edit
git clone https://github.com/AshutoshKumar7001/Product_API.git
2. Navigate to the Project Directory
Change your current directory to the root of the project:

bash
Copy
Edit
cd Product_API
3. (Optional) Create a Virtual Environment
Skip this step if you plan to use Docker only.

Create and activate a virtual environment (recommended for local development):

bash
Copy
Edit
python -m venv venv
Activate it:

On Windows:

bash
Copy
Edit
venv\Scripts\activate
On macOS/Linux:

bash
Copy
Edit
source venv/bin/activate
4. Set Up Environment Variables
Create a .env file in the root directory with the following content:

ini
Copy
Edit
FLASK_APP=app
FLASK_ENV=development
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=product_db
DATABASE_URL=postgresql://postgres:postgres@db:5432/product_db
5. Build & Run with Docker
Make sure you have Docker and Docker Compose installed.

To build and run the containers, run:

bash
Copy
Edit
docker-compose up --build
This command will:

Build your Flask image

Start the PostgreSQL database container

Run the Flask server at http://localhost:5000

6. Check if Everything is Running
Once Docker is up, visit:

bash
Copy
Edit
http://localhost:5000/products
You should get a JSON response or an empty list if there are no products yet.

7. Test APIs Using Postman
You can test the API endpoints using Postman:

Open Postman

Use the following endpoints:

GET /products â†’ List all products

GET /products/<id> â†’ Get a product by ID

POST /products â†’ Add a product (JSON body)

PUT /products/<id> â†’ Update product info

DELETE /products/<id> â†’ Remove a product

Base URL:

arduino
Copy
Edit
http://localhost:5000
ðŸ‘‰ Import the Product_API.postman_collection.json (if included in repo) into Postman to test all APIs.

8. Stopping the Server
To stop the Docker containers, run:

bash
Copy
Edit
docker-compose down
This will shut down both the Flask app and PostgreSQL containers.

9. (Optional) Run Locally Without Docker
If you prefer to run without Docker:

Install dependencies:

bash
Copy
Edit
pip install -r requirements.txt
Set the environment:

bash
Copy
Edit
flask run
âœ… You're All Set!
Your Flask API is now running and ready to manage product data via RESTful endpoints. Happy building!
